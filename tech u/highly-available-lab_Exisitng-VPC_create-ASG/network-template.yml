AWSTemplateFormatVersion: 2010-09-09
Description: Lab template

# Lab VPC with 2 public + 2 private subnets
# 1 x NAT Gateway (Student adds a second)
# DB Subnet Group across the 2 private subnets
# RDS in Private Subnet

Parameters:

  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: String

Resources:

###########
# VPC with Internet Gateway
###########

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Lab IG

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - VPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

###########
# Public Route Table
###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - VPCtoIGWConnection
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

###########
# Private Route Table
###########

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table 1

###########
# Public Subnets x 2
###########

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

###########
# Private Subnets x 2
###########

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/23
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/23
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable
      - PrivateSubnet1
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable
      - PrivateSubnet2
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

###########
# NAT Gateway
###########

  NATGateway:
    DependsOn: PrivateSubnet1
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt
        - NATGatewayEIP
        - AllocationId

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway

###########
# IAM Role for App
###########

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref AppRole]
      InstanceProfileName: Inventory-App-Role

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Inventory-App-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:*
                Resource: '*'

###########
# App Security Group
###########

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: Inventory-App
      GroupDescription: Enable access to App
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Inventory-App

###########
# DB Subnet Group
###########

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Lab-DB-Subnet-Group
      DBSubnetGroupName: Lab-DB-Subnet-Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        -
          Key: Name
          Value: DBSubnetGroup

###########
# DB Security Group
###########

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: Inventory-DB
      GroupDescription: Enable access to MySQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: Inventory-DB

###########
# RDS Database
###########

  RDSDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: inventory
      DBInstanceIdentifier: inventory-db
      AllocatedStorage: 5
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      MasterUsername: admin
      MasterUserPassword: lab-password
      MultiAZ: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      Tags:
        -
          Key: Name
          Value: inventory-db

############
## Lambda function to clear existing Parameter Store parameters
############
#
#  LambdaClearParameters:
#    DependsOn:
#      - CopyData
#      - CopyS3DataFunction
#      - SourceS3Bucket
#    Type: 'AWS::Lambda::Function'
#    Properties:
#      FunctionName: Clear-parameter-store
#      Handler: clear-parameter-store.handler
#      MemorySize: 128
#      Timeout: 300
#      Role: !Sub ${LambdaVPCRole.Arn}
#      Code:
#        S3Bucket: !Ref 'SourceS3Bucket'
#        S3Key: 'mod9-guided/scripts/clear-parameter-store.zip'
#      Runtime: python2.7
#
#  CustomClearParameters:
#    Type: 'Custom::CustomClearParameters'
#    Properties:
#      ServiceToken: !Sub ${LambdaClearParameters.Arn}
#
#  LambdaVPCRole:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - 'sts:AssumeRole'
#      Policies:
#        - PolicyName: SSMCleanup
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - ssm:*
#                  - ec2:Describe*
#                  - logs:CreateLogGroup
#                  - logs:CreateLogStream
#                  - logs:PutLogEvents
#                Resource: '*'
#
#  SourceS3Bucket:
#    Type: "AWS::S3::Bucket"
#    Properties:
#      BucketName: !Join
#        - "-"
#        - - "source-lf"  # Bucket name will start with this name.
#          - !Select
#            - 0
#            - !Split
#              - "-"
#              - !Select
#                - 2
#                - !Split
#                  - "/"
#                  - !Ref "AWS::StackId"
#
#  CopyS3DataRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: lambda.amazonaws.com
#            Action: sts:AssumeRole
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
#      Path: /
#      Policies:
#        - PolicyName: lambda-copier
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - s3:GetObject
#                  - s3:ListBucket
#                Resource: '*'
#              - Effect: Allow
#                Action:
#                  - s3:PutObject
#                  - s3:DeleteObject
#                Resource: '*'
#
#  CopyS3DataFunction:
#    Type: AWS::Lambda::Function
#    DependsOn: CopyS3DataRole
#    Properties:
#      Description: Copies objects from a source S3 bucket to a destination
#      Handler: index.handler
#      Runtime: python3.7
#      Role: !GetAtt 'CopyS3DataRole.Arn'
#      Timeout: 240
#      Code:
#        ZipFile: |
#          import json
#          import logging
#          import threading
#          import boto3
#          import cfnresponse
#
#
#          def copy_objects(source_bucket, dest_bucket, prefix, obj_path):
#              s3 = boto3.client("s3")
#              print(f"\nReceived details in copy function are:\nSource Bucket: {source_bucket}\nDestination Bucket: {dest_bucket}\nPrefix: {prefix}\nObjects: {obj_path}\n")
#              for each_obj in obj_path:
#                  key = prefix + each_obj
#                  if each_obj[-1] == '/':
#                      print(s3.list_objects_v2(Bucket=source_bucket, Prefix=key))
#                      object_list = s3.list_objects_v2(Bucket=source_bucket, Prefix=key)
#
#                      for obj in object_list['Contents']:
#                          source_key = obj['Key']
#                          print(f"Source Key is: {source_key}")
#                          copy_source = {'Bucket': source_bucket, 'Key': source_key}
#                          destination_key = source_key[len(prefix):]
#                          print(f"\nCopy details are:\nCopy Source: {copy_source}\nDestination Bucket: {dest_bucket}\nDestination Key: {destination_key}")
#                          s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=destination_key)
#                  else:
#                      copy_source = {'Bucket': source_bucket, 'Key': key}
#                      print(f"\nCopy details are:\nCopy Source: {copy_source}\nDestination Bucket: {dest_bucket}\nKey: {each_obj}")
#                      s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=each_obj)
#
#
#          def delete_objects(bucket):
#              s3conn = boto3.resource('s3')
#              bucket = s3conn.Bucket(bucket)
#              bucket.objects.all().delete()
#              bucket.object_versions.delete()
#              bucket.delete()
#              print(f"Delete details are:\n Bucket {bucket} deleted successfully.")
#
#          def timeout(event, context):
#              logging.error("Execution is about to time out, sending failure response to CloudFormation")
#              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
#
#          def handler(event, context):
#              # Send a failure to CloudFormation if the function timesout
#              timer = threading.Timer((context.get_remaining_time_in_millis()
#                      / 1000.00) - 0.5, timeout, args=[event, context])
#              timer.start()
#              print(f"Received event: {json.dumps(event)}")
#              status = cfnresponse.SUCCESS
#              try:
#                  source_bucket = event['ResourceProperties']['SourceBucket']
#                  dest_bucket = event['ResourceProperties']['DestBucket']
#                  prefix = event['ResourceProperties']['Prefix']
#                  obj_path = event['ResourceProperties']['Objects']
#                  if event['RequestType'] == 'Delete':
#                      delete_objects(dest_bucket)
#                  else:
#                      copy_objects(source_bucket, dest_bucket, prefix, obj_path)
#              except Exception as excep:
#                  logging.error("Exception: %s" % excep, exc_info=True)
#                  status = cfnresponse.FAILED
#              finally:
#                  timer.cancel()
#                  cfnresponse.send(event, context, status, {}, None)
#
#
#  CopyData:
#    Type: Custom::CopyData
#    DependsOn:
#      - CopyS3DataFunction
#      - SourceS3Bucket
#    Properties:
#      ServiceToken: !GetAtt 'CopyS3DataFunction.Arn'
#      SourceBucket: 'aws-tc-largeobjects'
#      DestBucket: !Ref 'SourceS3Bucket'
#      Prefix: 'ILT-TF-200-ACACAD-20-EN/'
#      Objects:
#        - 'mod9-guided/scripts/clear-parameter-store.zip'                                       # Enter objects to copy here.

###########
# Web Server 1 - used to create AMI
###########
  WebInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmazonLinuxAMIID
      KeyName: !Ref KeyName
      InstanceType: t3.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref AppSecurityGroup
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: Web Server 1
      UserData:
        Fn::Base64: !Sub |      
          #!/bin/bash
          # Install Apache Web Server and PHP
          yum install -y httpd mysql
          amazon-linux-extras install -y php7.2
          # Download Lab files
          wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-TULABS-1/55-lab-creating-ha-apps/s3/inventory-app.zip
          unzip inventory-app.zip -d /var/www/html/
          # Download and install the AWS SDK for PHP
          wget https://github.com/aws/aws-sdk-php/releases/download/3.62.3/aws.zip
          unzip aws -d /var/www/html
          # Turn on web server
          chkconfig httpd on
          service httpd start

###########
# Outputs
###########

Outputs:

  Endpoint:
    Value: !GetAtt
      - RDSDatabase
      - Endpoint.Address
    Description: Database endpoint

  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Description: PublicSubnet2

  NATGateway1:
    Value: !Ref NATGateway
    Description: NATGateway1